# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aFy-NFdS12F4DK19mHP7btnOqtkMHRhZ
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
import pickle
import numpy as np
from datetime import timedelta, datetime

st.title('Stock Price Forecasting App')

st.sidebar.header('User Inputs')
stock = st.sidebar.text_input('Enter stock ticker', 'RELIANCE.NS')
period = st.sidebar.selectbox('Select data period for past data', ('1y', '5y', '10y'))
predict_days = st.sidebar.number_input('Number of days to predict into future', min_value=1, max_value=30, value=3)

st.write(f'### Downloading fresh stock data for {stock}')
df = yf.download(stock, period=period, interval="1d", progress=False)
df = df[['Close']].reset_index()
df['Date'] = pd.to_datetime(df['Date']).dt.date

st.write('### Last 30 Days Stock Price')
st.dataframe(df.tail(30))

# Plot past 30 days line chart
fig, ax = plt.subplots(figsize=(12,6))
ax.plot(df['Date'].tail(30), df['Close'].tail(30), marker='o', linestyle='-')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title(f'{stock} Closing Price - Last 30 Days')
plt.xticks(rotation=45)
plt.grid(True)
st.pyplot(fig)

if st.button('Predict Future Prices'):
    st.write('Loading model and scaler...')

    # Load scaler and model
    with open('scaler.pkl', 'rb') as f:
        scaler = pickle.load(f)
    model = load_model('lstm_model.h5')

    n_input = 50
    n_features = 1

    # Use the most recent 50 days of Close prices
    data_for_prediction = df['Close'].values[-n_input:].reshape(-1, 1)
    scaled_data = scaler.transform(data_for_prediction)

    current_batch = scaled_data.reshape((1, n_input, n_features))
    future_predictions = []

    for _ in range(predict_days):
        current_pred = model.predict(current_batch)[0]
        future_predictions.append(current_pred)
        current_batch = np.append(current_batch[:,1:,:], [[current_pred]], axis=1)

    predicted_prices = scaler.inverse_transform(future_predictions).flatten()

    # Generate future dates
    last_date = df['Date'].iloc[-1]
    future_dates = [last_date + timedelta(days=i+1) for i in range(predict_days)]

    prediction_df = pd.DataFrame({
        'Date': future_dates,
        'Predicted Close Price': predicted_prices
    })

    st.write('### Predicted Future Prices')
    st.dataframe(prediction_df)

    # Plot predicted future prices
    fig2, ax2 = plt.subplots(figsize=(12,6))
    ax2.plot(df['Date'].tail(30), df['Close'].tail(30), marker='o', label='Past Prices')
    ax2.plot(prediction_df['Date'], prediction_df['Predicted Close Price'], marker='x', linestyle='--', color='orange', label='Predicted Prices')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'{stock} Price Forecast')
    plt.legend()
    plt.xticks(rotation=45)
    plt.grid(True)
    st.pyplot(fig2)